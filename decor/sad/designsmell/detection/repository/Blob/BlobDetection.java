package sad.designsmell.detection.repository.Blob;

/**
 * This class implements the detection algorithms 
 * of the design smell Blob.
 * 
 * @author Autogenerated files
 * 
 */

import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

import padl.kernel.IAbstractLevelModel;
import sad.codesmell.detection.repository.Blob.*;
import sad.kernel.ICodeSmell;
import sad.codesmell.detection.ICodeSmellDetection;
import sad.designsmell.detection.IDesignSmellDetection;
import sad.designsmell.detection.repository.AbstractDesignSmellDetection;
import sad.kernel.impl.DesignSmell;
import sad.util.OperatorsCodeSmells;
import sad.util.Relationships;

public class BlobDetection extends AbstractDesignSmellDetection implements IDesignSmellDetection {
	private final OperatorsCodeSmells operators;
	private final Relationships relations;

	public BlobDetection() {
		super();

		this.operators = OperatorsCodeSmells.getInstance();
		this.relations = Relationships.getInstance();
	}
	
	public String getName() {
		return "Blob";
	}

	public String getRuleCardFile() {
		return "../SAD Rules Creator/rsc/Blob.rules";
	}

	
public void detect(final IAbstractLevelModel anAbstractLevelModel) {
final Set candidateDesignSmells = new HashSet();

final ICodeSmellDetection csDataClass = new DataClassDetection();
csDataClass.detect(anAbstractLevelModel);
final Set setDataClass = ((DataClassDetection) csDataClass).getCodeSmells();

final ICodeSmellDetection csControllerClass = new ControllerClassDetection();
csControllerClass.detect(anAbstractLevelModel);
final Set setControllerClass = ((ControllerClassDetection) csControllerClass).getCodeSmells();

final ICodeSmellDetection csLowCohesion = new LowCohesionDetection();
csLowCohesion.detect(anAbstractLevelModel);
final Set setLowCohesion = ((LowCohesionDetection) csLowCohesion).getCodeSmells();

final ICodeSmellDetection csLargeClass = new LargeClassDetection();
csLargeClass.detect(anAbstractLevelModel);
final Set setLargeClass = ((LargeClassDetection) csLargeClass).getCodeSmells();

final Set setLargeClassLowCohesion = 
this.operators.union(setLargeClass,setLowCohesion);

final Set setmainClass = 
this.operators.union(setLargeClassLowCohesion,setControllerClass);

final Set setBlob = this.relations.checkAssociationOneToMany(1, setmainClass,  setDataClass);

final Iterator iterSet = setBlob.iterator();
while(iterSet.hasNext()) {
final ICodeSmell aCodeSmell = (ICodeSmell) iterSet.next();
final DesignSmell designSmell = new DesignSmell(aCodeSmell);
designSmell.setName("Blob");
final String definition = "To defined";
designSmell.setDefinition(definition);
candidateDesignSmells.add(designSmell);
}
this.setSetOfDesignSmells(candidateDesignSmells);
}
}
