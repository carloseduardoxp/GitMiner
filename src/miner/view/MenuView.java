/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package miner.view;

import java.awt.Toolkit;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import miner.model.dao.structure.DaoFactory;
import miner.util.exception.ObjectNotFoundException;
import miner.util.exception.ValidationException;

/**
 *
 * @author carloseduardoxp
 */
public final class MenuView extends javax.swing.JFrame {

    /**
     * Creates new form MenuView
     */
    public MenuView() {
        //System.setProperty("java.library.path","value_you_want");
        initComponents();
        isPathDatabaseOk();
        frameInMiddle();
    }

    private void frameInMiddle() {
        this.setLocation(
                ((Toolkit.getDefaultToolkit().getScreenSize().width / 2)
                - (this.getWidth() / 2)),
                ((Toolkit.getDefaultToolkit().getScreenSize().height / 2)
                - (this.getHeight() / 2))
        );
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desktopPane = new javax.swing.JDesktopPane();
        menuBar = new javax.swing.JMenuBar();
        mnuConfiguration = new javax.swing.JMenu();
        mnuIteDatabasePath = new javax.swing.JMenuItem();
        mnuImport = new javax.swing.JMenu();
        mnuIteGitProject = new javax.swing.JMenuItem();
        mnuIteClasses = new javax.swing.JMenuItem();
        mnuIteSmells = new javax.swing.JMenuItem();
        mnuIteCodeMetrics = new javax.swing.JMenuItem();
        mnuReport = new javax.swing.JMenu();
        mnuIteInterRelationSmells = new javax.swing.JMenuItem();
        mnuExit = new javax.swing.JMenu();
        mnuIteExit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Git Miner - created by carloseduardoxpto@gmail.com");
        setLocationByPlatform(true);
        setResizable(false);

        menuBar.setToolTipText("");

        mnuConfiguration.setText("Configuration");

        mnuIteDatabasePath.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.ALT_MASK));
        mnuIteDatabasePath.setText("Database & Path");
        mnuIteDatabasePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuIteDatabasePathActionPerformed(evt);
            }
        });
        mnuConfiguration.add(mnuIteDatabasePath);

        menuBar.add(mnuConfiguration);

        mnuImport.setMnemonic('f');
        mnuImport.setText("Import");

        mnuIteGitProject.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.ALT_MASK));
        mnuIteGitProject.setMnemonic('o');
        mnuIteGitProject.setText("Git Project");
        mnuIteGitProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuIteGitProjectActionPerformed(evt);
            }
        });
        mnuImport.add(mnuIteGitProject);

        mnuIteClasses.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK));
        mnuIteClasses.setText("Classes");
        mnuIteClasses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuIteClassesActionPerformed(evt);
            }
        });
        mnuImport.add(mnuIteClasses);

        mnuIteSmells.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK));
        mnuIteSmells.setMnemonic('s');
        mnuIteSmells.setText("Code Smells & Metrics");
        mnuIteSmells.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuIteSmellsActionPerformed(evt);
            }
        });
        mnuImport.add(mnuIteSmells);

        mnuIteCodeMetrics.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.ALT_MASK));
        mnuIteCodeMetrics.setMnemonic('s');
        mnuIteCodeMetrics.setText("Code Metrics");
        mnuIteCodeMetrics.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuIteCodeMetricsActionPerformed(evt);
            }
        });
        mnuImport.add(mnuIteCodeMetrics);

        menuBar.add(mnuImport);

        mnuReport.setMnemonic('e');
        mnuReport.setText("Report");

        mnuIteInterRelationSmells.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.ALT_MASK));
        mnuIteInterRelationSmells.setMnemonic('t');
        mnuIteInterRelationSmells.setText("Inter Relation Smells");
        mnuIteInterRelationSmells.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuIteInterRelationSmellsActionPerformed(evt);
            }
        });
        mnuReport.add(mnuIteInterRelationSmells);

        menuBar.add(mnuReport);

        mnuExit.setText("Exit");

        mnuIteExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        mnuIteExit.setText("Exit");
        mnuIteExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuIteExitActionPerformed(evt);
            }
        });
        mnuExit.add(mnuIteExit);

        menuBar.add(mnuExit);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(desktopPane, javax.swing.GroupLayout.PREFERRED_SIZE, 826, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 678, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mnuIteGitProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuIteGitProjectActionPerformed
        if (isPathDatabaseOk()) {
            showJInternalFrame(new ImportGitProjectView());
        }

    }//GEN-LAST:event_mnuIteGitProjectActionPerformed

    private void mnuIteDatabasePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuIteDatabasePathActionPerformed
        showJInternalFrame(new ConfigurationView());
    }//GEN-LAST:event_mnuIteDatabasePathActionPerformed

    private void mnuIteClassesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuIteClassesActionPerformed
        if (isPathDatabaseOk()) {
            showJInternalFrame(new ImportClassesView());
        }
    }//GEN-LAST:event_mnuIteClassesActionPerformed

    private void mnuIteInterRelationSmellsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuIteInterRelationSmellsActionPerformed
        if (isPathDatabaseOk()) {
            showJInternalFrame(new InterRelationSmellsView());
        }
    }//GEN-LAST:event_mnuIteInterRelationSmellsActionPerformed

    private void mnuIteExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuIteExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_mnuIteExitActionPerformed

    private void mnuIteCodeMetricsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuIteCodeMetricsActionPerformed
    	if (isPathDatabaseOk()) {
            showJInternalFrame(new ImportMetricsView());
        }
    }//GEN-LAST:event_mnuIteCodeMetricsActionPerformed

    private void mnuIteSmellsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuIteSmellsActionPerformed
        if (isPathDatabaseOk()) {
            showJInternalFrame(new ImportCodeSmellsView());
        }
    }//GEN-LAST:event_mnuIteSmellsActionPerformed

    public void showJInternalFrame(JInternalFrame frame) {
        this.desktopPane.add(frame);
        frame.setVisible(true);
    }

    public boolean isPathDatabaseOk() {
        try {
            DaoFactory.getConfigurationDao().getConfiguration();
            return true;
        } catch (ObjectNotFoundException | ValidationException e) {
            JOptionPane.showMessageDialog(this,
                    e.getMessage() + "\n" + " Will open Database & Path Configuration", "Verify Path & Database",
                    JOptionPane.WARNING_MESSAGE);
            showJInternalFrame(new ConfigurationView());
            return false;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu mnuConfiguration;
    private javax.swing.JMenu mnuExit;
    private javax.swing.JMenu mnuImport;
    private javax.swing.JMenuItem mnuIteClasses;
    private javax.swing.JMenuItem mnuIteCodeMetrics;
    private javax.swing.JMenuItem mnuIteDatabasePath;
    private javax.swing.JMenuItem mnuIteExit;
    private javax.swing.JMenuItem mnuIteGitProject;
    private javax.swing.JMenuItem mnuIteInterRelationSmells;
    private javax.swing.JMenuItem mnuIteSmells;
    private javax.swing.JMenu mnuReport;
    // End of variables declaration//GEN-END:variables

}
